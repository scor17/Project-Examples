@model IEnumerable<healthApp.Models.Chats>
@{
    ViewBag.Title = "Chat";
}
<br/><br />
<div class="container">
 
   
    <div class="container">
        <div class="row">
            <div >
                <div class="panel panel-primary">
                    <div class="panel-heading">
                        <h5><span class="glyphicon glyphicon-comment"></span> Chat</h5>
                        <div class="btn-group pull-right">


                        </div>
                    </div>
                    <div class="panel-body">
                        <ul class="chat" id="discussion">
                            @{
                                 bool flip = true;
                            foreach (var item in Model)
                            {
                                
                                if (flip)
                                {
                                    <li class="right clearfix">
                                        <div class="clearfix">
                                            <div class="pull-right header">
                                                <strong class="pull-right primary-font">@Html.DisplayFor(modelItem => item.UserName)</strong>
                                            </div>
                                            <br/>
                                            <p>@Html.DisplayFor(modelItem => item.Chat)</p>
                                        </div>
                                    </li>
                                    flip = false;
                                }
                                else
                                {
                                    <li class="left clearfix">
                                        <div class="clearfix">
                                            <div class="header">
                                                <strong class="primary-font">@Html.DisplayFor(modelItem => item.UserName)</strong>
                                            </div>
                                            <br />
                                            <p>@Html.DisplayFor(modelItem => item.Chat)</p>
                                        </div>

                                    </li>
                                    flip = true;
                                }
                            }
                                


                            } 
                        </ul>

                        <input type="hidden" id="flipper" value=@flip />
                    </div>
                    <div class="panel-footer">
                        <div class="input-group">

                            <input id="btn-input" type="text" class="form-control input-lg"  placeholder="Type your message here..." />
                            <span class="input-group-btn">
                                <button class="btn btn-warning btn-lg" id="btn-chat">
                                    Send
                                </button>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <ul id="discussion">
       
    </ul>
</div>
@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->

    <script src="~/Scripts/jquery.signalR-2.0.2.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>

        

        $(function () {
            $(".panel-body").scrollTop($('.panel-body')[0].scrollHeight);
            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.chatHub;
            var flip = $('#flipper').val();
           
            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessageToPage = function (name, message) {
                // Add the message to the page.
                if (flip) {
                    var append = '<li class=\"right clearfix\"> <div class=\"clearfix\"> <div class=\"pull-left header\">';
                    append += '<strong class="pull-right primary-font">';
                    
                       
                    flip =false;
                } else {
                    var append = '<li class=\"left clearfix\"><div class=\"clearfix\"><div class=\"pull-right header\">';
                    append +='  <strong class="primary-font">';
                    flip = true;
                }

                $('#discussion').append(
                   
                    append + htmlEncode(name) + '</strong></div><br/><p>' + htmlEncode(message) + '</p></div></li>'
                   
                  );
                $(".panel-body").scrollTop($('.panel-body')[0].scrollHeight);
               
            };

            chat.client.acknowledged = function (received) {
                //db stuff to remove record from local storage
            };
            // Get the user name and store it to prepend to messages.
            //$('#displayname').val("test");
            // Set initial focus to message input box.
            $('#btn-input').focus();
            // Start the connection.
            $.connection.hub.start().done(function () {
                $('#btn-chat').click(function () {
                    // Call the Send method on the hub.
                    chat.server.send($('#btn-input').val());
                    // Clear text box and reset focus for next comment.
                    $('#btn-input').val('').focus();
                });
                
                $('#btn-input').keypress(function (event) {
                    if (event.keyCode == 13) {
                        // Call the Send method on the hub.
                        chat.server.send($('#btn-input').val());
                        // Clear text box and reset focus for next comment.
                        $('#btn-input').val('').focus();
                    }
                });

            });
        });
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
    </script>
}
